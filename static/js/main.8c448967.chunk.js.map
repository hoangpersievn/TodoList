{"version":3,"sources":["icons/check.svg","icons/uncheck.svg","icons/down_button.svg","context/TodoContext.js","components/todo/TodoItem.js","components/todo/TodoList.js","components/todo/TodoInput.js","components/todo/TodoAction.js","components/todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoContext","createContext","TodoProvider","props","actToggleComplete","todo","indexTodo","state","todos","indexOf","setState","slice","isComplete","actToggleAll","matchTodos","map","stateComplete","actInsertTodo","actUpdateLocalStorage","localStorage","setItem","JSON","stringify","actDeleteTodos","filter","actToggleAllStorage","a","async","actMatchTodos","mode","actToggleCompleteStorag","actInsertTodoLocalStorage","actDeleteTodosLocalStorage","action","result","isAction","parse","getItem","Provider","value","this","children","Component","TodoItem","useContext","className","src","CheckIo","UnCheckIo","alt","onClick","job","TodoList","length","index","key","showTodos","TodoInput","useState","inputValue","setInputValue","style","width","height","DownButton","type","placeholder","onChange","event","target","onKeyUp","keyCode","TodoAction","actions","setIsAction","handlePOnClick","actActiveAction","item","showActios","Todo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c448967.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.d29f1779.svg\";","module.exports = __webpack_public_path__ + \"static/media/uncheck.40eb9cc6.svg\";","module.exports = __webpack_public_path__ + \"static/media/down_button.2f236e6f.svg\";","import React, { Component, createContext } from 'react';\r\n\r\nexport const TodoContext = createContext(null);\r\n\r\nexport class TodoProvider extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            todos : JSON.parse(localStorage.getItem('todos')) || [],\r\n            isAction : false,\r\n            stateComplete : false,\r\n            matchTodos : [],\r\n            mode : \"\"\r\n\r\n        };\r\n    };\r\n\r\n    actToggleComplete = (todo) => {\r\n        let indexTodo = this.state.todos.indexOf(todo);\r\n\r\n        this.setState({\r\n            todos : [\r\n                ...this.state.todos.slice(0, indexTodo),\r\n                {...todo, isComplete : !todo.isComplete},\r\n                ...this.state.todos.slice(indexTodo+1)\r\n            ],\r\n        })\r\n    };\r\n\r\n    actToggleAll = () => {\r\n\r\n        let matchTodos = this.state.todos.map( todo => {\r\n            return {...todo, isComplete : this.state.stateComplete}\r\n        })\r\n        this.setState({\r\n            todos : matchTodos,\r\n            stateComplete : !this.state.stateComplete\r\n        })\r\n    };\r\n\r\n    actInsertTodo = (todo) => {\r\n        if(todo) {\r\n            this.setState({\r\n                todos : [\r\n                    {...todo},\r\n                    ...this.state.todos\r\n                ]\r\n            })\r\n        }\r\n    };\r\n\r\n    actUpdateLocalStorage = () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\r\n    };\r\n\r\n    actDeleteTodos = () => {\r\n        let matchTodos = this.state.todos.filter( todo => todo.isComplete === false)\r\n        this.setState({\r\n            todos : matchTodos\r\n        })\r\n    };\r\n    \r\n    actToggleAllStorage = async () => {\r\n        await this.actToggleAll();\r\n        await this.actMatchTodos(this.state.mode);\r\n        await this.actUpdateLocalStorage();\r\n    };\r\n\r\n    actToggleCompleteStorag = async (todo) => {\r\n        await this.actToggleComplete(todo);\r\n        await this.actMatchTodos(this.state.mode);\r\n        await this.actUpdateLocalStorage();\r\n    };\r\n\r\n    actInsertTodoLocalStorage = async (todo) => {\r\n        await this.actInsertTodo(todo)\r\n        await this.actMatchTodos(this.state.mode)\r\n        await this.actUpdateLocalStorage();\r\n    };\r\n\r\n    actDeleteTodosLocalStorage = async () => {\r\n        await this.actDeleteTodos();\r\n        await this.actMatchTodos(this.state.mode);\r\n        await this.actUpdateLocalStorage();\r\n    };\r\n\r\n    actMatchTodos = (action) => {\r\n        let result = [];\r\n\r\n        switch(action) {\r\n            case \"Active\" :\r\n                result = this.state.todos.filter(todo => todo.isComplete === false ? todo : null);\r\n                break;\r\n            case \"Complete\" :\r\n                result = this.state.todos.filter(todo => todo.isComplete === true ? todo : null);\r\n                break;\r\n            default : \r\n                result = this.state.todos;\r\n                break;\r\n        };\r\n        this.setState({\r\n            mode : action,\r\n            matchTodos : result,\r\n            isAction : true\r\n        })\r\n    }; \r\n\r\n    render() {\r\n        \r\n        return (\r\n            <TodoContext.Provider value={{\r\n                todos : this.state.todos,\r\n                matchTodos : this.state.matchTodos,\r\n                isAction : this.state.isAction,\r\n                actToggleComplete : this.actToggleCompleteStorag,\r\n                actToggleAll : this.actToggleAllStorage,\r\n                actInsertTodo : this.actInsertTodoLocalStorage,\r\n                actDeleteTodos : this.actDeleteTodosLocalStorage,\r\n                actMatchTodos : this.actMatchTodos\r\n            }}>\r\n                {this.props.children}\r\n            </TodoContext.Provider>\r\n        );\r\n    };\r\n};","import React, { useContext } from 'react';\r\n\r\nimport CheckIo from '../../icons/check.svg';\r\nimport UnCheckIo from '../../icons/uncheck.svg';\r\nimport { TodoContext } from '../../context/TodoContext';\r\n\r\nconst TodoItem = (props) => {\r\n    const { todo } = props;\r\n    const { actToggleComplete } = useContext(TodoContext);\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <img \r\n                className=\"icon-check\" \r\n                src={`${todo.isComplete ? CheckIo : UnCheckIo}`} \r\n                alt=\"Complete\"\r\n                onClick={() => actToggleComplete(todo)}\r\n            />\r\n            <p\r\n                className={`${todo.isComplete ? \"isComplete\" : \"\"}`}\r\n            >\r\n                {todo.job}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoItem;","import React, { useContext } from 'react';\r\n\r\nimport TodoItem from './TodoItem';\r\nimport {TodoContext} from '../../context/TodoContext';\r\n\r\nconst TodoList = (props) =>  {\r\n    const { todos, matchTodos, isAction } = useContext(TodoContext);\r\n\r\n    const showTodos = (todos) => {\r\n        let result = \"\";\r\n\r\n        if(todos.length > 0) {\r\n            result = todos.map( (todo, index) => {\r\n                return (\r\n                    <TodoItem\r\n                        key={index}\r\n                        todo={todo}\r\n                    />\r\n                );\r\n            })\r\n        };\r\n        return result;\r\n    };\r\n\r\n    return (\r\n        <div className=\"todo-list\">\r\n            {showTodos(isAction ? matchTodos : todos)}\r\n        </div>\r\n    );\r\n\r\n    \r\n};\r\n\r\nexport default TodoList;","import React, { useContext, useState } from 'react';\r\n\r\nimport { TodoContext } from '../../context/TodoContext';\r\n\r\nimport DownButton from '../../icons/down_button.svg';\r\n\r\nconst TodoInput = (props) => {\r\n    const { actToggleAll, actInsertTodo } = useContext(TodoContext);\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInputOnChange = (value) => {\r\n        setInputValue(value);\r\n    };\r\n\r\n    const handleInputOnKeyUp = (value) => {\r\n        if(value === 13){\r\n            actInsertTodo({job : inputValue, isComplete : false});\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"todo-add\">\r\n            <img \r\n                className=\"add-img\" \r\n                style={{width : 32, height : 32}} \r\n                src={DownButton} \r\n                alt=\"check_all\"\r\n                onClick={() => actToggleAll()}\r\n            />\r\n            <input \r\n                className=\"add-input\" \r\n                type=\"text\" \r\n                placeholder=\"Add a new todo...\"\r\n                onChange={(event) => handleInputOnChange(event.target.value)}    \r\n                onKeyUp={(event) => handleInputOnKeyUp(event.keyCode)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoInput;","import React, {useContext, useState} from 'react';\r\n\r\nimport { TodoContext } from '../../context/TodoContext';\r\n\r\nconst TodoAction = (props) => {\r\n    const { todos, actDeleteTodos, actMatchTodos } = useContext(TodoContext);\r\n    const [actions, setActions] = useState([\"All\", \"Active\", \"Complete\"]);\r\n    const [isAction, setIsAction] = useState(0);\r\n\r\n    const actActiveAction = (index) => {\r\n        setIsAction(index)\r\n    };\r\n\r\n    const handlePOnClick = (index, action) => {\r\n\r\n        actActiveAction(index);\r\n        actMatchTodos(action);\r\n    };\r\n\r\n    const showActios = (actions) => {\r\n        return actions.map( (item, index) => {\r\n            return (\r\n                <div key={index} className={`action-content ${isAction === index ? 'active' : \"\"}`}>\r\n                    <p\r\n                        onClick={() => handlePOnClick(index, item)}\r\n                    >\r\n                        {item}\r\n                    </p>\r\n                </div>\r\n            );\r\n        })\r\n    };\r\n\r\n    return (\r\n        <div className=\"todo-action\">\r\n            <div className=\"action\">\r\n                <p>{`${todos.length} todos`}</p>\r\n            </div>\r\n            <div className=\"action\">\r\n                {showActios(actions)}\r\n            </div>\r\n            <div className=\"action\">\r\n                <p\r\n                    onClick={() => actDeleteTodos()}\r\n                >\r\n                    Clear Completed\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoAction;","import React from 'react';\r\n\r\nimport TodoList from './TodoList';\r\nimport TodoInput from './TodoInput';\r\nimport TodoAction from './TodoAction';\r\n\r\nimport './Todo.css';\r\n\r\nconst Todo  = (props) => {\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <div className=\"todo-top\">\r\n                <TodoInput/>\r\n            </div>\r\n            <TodoList/>\r\n            <div className=\"todo-bottom\">\r\n                <TodoAction/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;","import React from 'react';\n\nimport Todo from './components/todo/Todo';\nimport {TodoProvider} from './context/TodoContext';\n\nimport './App.css';\n\nconst App = (props) => {\n\n    return (\n        <TodoProvider>\n            <Todo/>\n        </TodoProvider>\n    )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}